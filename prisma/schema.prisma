// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Participant {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(50)
  age     Int
  email   String   @unique @db.VarChar(255)
  results Result[] @relation()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("participants")
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("admin")
}

model Level {
  id          Int        @id @default(autoincrement())
  level       Int
  description String?    @db.Text
  a           Float
  questions   Question[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("levels")
}

model Question {
  id        String   @id @default(uuid())
  level_id  Int
  level     Level    @relation(fields: [level_id], references: [id])
  body      String?  @db.Text
  image_url String?  @db.VarChar(255)
  answers   Answer[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("questions")
}

model Answer {
  id          Int      @id @default(autoincrement())
  question_id String
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  body        String?  @db.Text
  image_url   String?  @db.VarChar(255)
  is_correct  Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("answers")
}

model Result {
  id               String           @id @default(uuid())
  participant_id   Int
  participant      Participant      @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  level_result     Int
  description      String?          @db.Text
  total_correct    Int
  result_questions ResultQuestion[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("results")
}

model ResultQuestion {
  id             Int            @id @default(autoincrement())
  result_id      String
  result         Result         @relation(fields: [result_id], references: [id], onDelete: Cascade)
  level_id       Int
  body           String?        @db.Text
  image_url      String?        @db.VarChar(255)
  result_answers ResultAnswer[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("result_questions")
}

model ResultAnswer {
  id                 Int            @id @default(autoincrement())
  result_question_id Int
  result_question    ResultQuestion @relation(fields: [result_question_id], references: [id], onDelete: Cascade)
  body               String?        @db.Text
  image_url          String?        @db.VarChar(255)
  answered           Boolean
  is_correct         Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("result_answers")
}
