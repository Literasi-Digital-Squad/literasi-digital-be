// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participant {
  id      Int	            @id @default(autoincrement())
  name    String          @db.VarChar(50)
  age     Int
  phone   String          @db.VarChar(100)
  email   String @unique  @db.VarChar(255)
  results Result[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("participants")
}

model Admin {
  id       Int            @id @default(autoincrement())
  name     String         @db.VarChar(50)
  email    String @unique @db.VarChar(255)
  password String         @db.VarChar(15)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admin")
}

model Level {
  id          Int        @id @default(autoincrement())
  level       Int
  description String?    @db.Text
  questions   Question[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("level")
}

model Question {
  id        String   @id @default(uuid()) @db.Uuid
  levelId   Int      @map("level_id")
  level     Level    @relation(fields: [levelId], references: [id])
  body      String?  @db.Text
  imageUrl  String?  @map("image_url") @db.VarChar(255)
  answers   Answer[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("question")
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId String   @map("question_id") @db.Uuid
  question   Question @relation(fields: [questionId], references: [id])
  body       String?  @db.Text
  imageUrl   String?  @map("image_url") @db.VarChar(255)
  isCorrect  Boolean
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("answer")
}

model Result {
  id            String           @id @default(uuid()) @db.Uuid
  participantId Int              @map("participant_id")
  participant   Participant      @relation(fields: [participantId], references: [id])
  levelResult   Int              @map("level_result")
  description   String?          @db.Text
  resultQuestions ResultQuestion[]
  
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  @@map("result")
}

model ResultQuestion {
  id         String         @id @default(uuid()) @db.Uuid
  resultId   String         @map("result_id") @db.Uuid
  result     Result         @relation(fields: [resultId], references: [id])
  body       String?        @db.Text
  imageUrl   String?        @map("image_url") @db.VarChar(255)
  resultAnswers ResultAnswer[]
  
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@map("result_question")
}

model ResultAnswer {
  id                String        @id @default(uuid()) @db.Uuid
  resultQuestionId  String        @map("result_question_id") @db.Uuid
  resultQuestion    ResultQuestion @relation(fields: [resultQuestionId], references: [id])
  body              String?       @db.Text
  imageUrl          String?       @map("image_url") @db.VarChar(255)
  answered          Boolean
  isCorrect         Boolean
  
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  @@map("result_answer")
}